#!/usr/bin/env python

import os
from module import *
from sys import argv
from pyrser import meta
from pyrser.grammar import Grammar
from cnorm.parsing.statement import Statement
from cnorm.parsing.declaration import Declaration
from os.path import isfile
from cnorm.passes import to_c


execPath = os.getcwd()
filePath = os.path.dirname(os.path.realpath(__file__))


class Kooc(Grammar, Declaration):
    entry = 'translation_unit'
    grammar = """
    declaration = [Declaration.declaration | module | import]
    module = ["@module" id :i Statement.compound_statement :st #add_module(st, i)]
    import = ["@import" '"' [id ".kh"] :i '"' #add_import(current_block, i)]
    """
    imports = []


@meta.hook(Kooc)
def add_module(self, statement, mName):
    return True


@meta.hook(Kooc)
def add_import(self, ast, ident):
    mod_name = self.value(ident)
    if mod_name in Kooc.imports:
        return True
    a = Kooc()
    r = a.parse_file(mod_name)
    ast.ref.body.extend(r.body)
    return True



def main():
    if len(argv) != 2:
        print('Only one parameter required')
        return 1
    inFile = execPath + '/' + argv[1]
    outFile = ''
    if not isfile(inFile):
        print('Given file doesn\'t exist')
        return 1
    if inFile.endswith('.kc'):
        outFile = inFile.replace('.kc', '.c')
    elif inFile.endswith('.kh'):
        outFile = inFile.replace('.kh', '.h')
    else:
        return 1

    a = Kooc()
    res = a.parse_file(inFile)
    # transformation
    fd = open(outFile, 'w+')
    fd.write(str(res.to_c()))
    fd.close()
    return 0
    
    
if __name__ == '__main__':
    main()
