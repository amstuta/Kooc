typedef struct _kc_Object Object;
typedef struct _kc_vt_Object vt_Object;

#include <string.h>
#include <stdlib.h>
#include "kooc.h"


@implementation Object
{
	void clean(Object *self)
	{
	}

	int isKindOf(Object *self, const char *name)
	{
		int i = 0;
		while (self->inheritance[i] != NULL)
		{
		     if (strcmp(self->inheritance[i], name) == 0)
			return 0;
	 	   i++;
		}
		return 1;
	}

	int isKindOf(Object *self, Object *a)
	{
		int i = 0;
		while (self->inheritance[i] != NULL)
		{
		     if (strcmp(self->inheritance[i], a->name) == 0)
		      	return 0;
		   i++;
		}
		return 1;
	}

	int isInstanceOf(Object *self, const char *name)
	{
		if (!strcmp(self->name, name))
		{
			return 1;
		}
		return 0;
	}

	int isInstanceOf(Object *self, Object *a)
	{
		if (!strcmp(self->name, a->name))
		{
			return 1;
		}
		return 0;
	}

	const char *name_of_interface(Object *self)
	{
		return self->name;
	}

	void init(Object *self)
	{
	}

	Object *alloc()
	{
		Object *self = malloc(sizeof(Object));
		return self;
	}

	Object *new()
	{
		Object *self;
		self = alloc();
		init(self);
		self->name = "Object";
		self->vt = &vtable_Object;
		self->inheritance = 0;
		return self;
	}

	void delete(Object *self)
	{
		((vt_Object*)self->vt)->clean(self);
	}
}